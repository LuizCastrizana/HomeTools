{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ValidacaoService {\n  constructor() {}\n  apenasNumeros(event) {\n    const pattern = /[0-9]/;\n    let inputChar = String.fromCharCode(event.charCode);\n    if (!pattern.test(inputChar)) return false;else return true;\n  }\n  apenasNumerosPositivos(event) {\n    const pattern = /[1-9]/;\n    let inputChar = String.fromCharCode(event.charCode);\n    if (!pattern.test(inputChar)) return false;else return true;\n  }\n  static #_ = this.ɵfac = function ValidacaoService_Factory(t) {\n    return new (t || ValidacaoService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ValidacaoService,\n    factory: ValidacaoService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,gBAAgB;EAE3BC,eAAgB;EAEhBC,aAAa,CAACC,KAAU;IACtB,MAAMC,OAAO,GAAG,OAAO;IACvB,IAAIC,SAAS,GAAGC,MAAM,CAACC,YAAY,CAACJ,KAAK,CAACK,QAAQ,CAAC;IACnD,IAAI,CAACJ,OAAO,CAACK,IAAI,CAACJ,SAAS,CAAC,EAC1B,OAAO,KAAK,CAAC,KAEb,OAAO,IAAI;EACf;EAEAK,sBAAsB,CAACP,KAAU;IAC/B,MAAMC,OAAO,GAAG,OAAO;IACvB,IAAIC,SAAS,GAAGC,MAAM,CAACC,YAAY,CAACJ,KAAK,CAACK,QAAQ,CAAC;IACnD,IAAI,CAACJ,OAAO,CAACK,IAAI,CAACJ,SAAS,CAAC,EAC1B,OAAO,KAAK,CAAC,KAEb,OAAO,IAAI;EACf;EAAC;qBApBUL,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAW,SAAhBX,gBAAgB;IAAAY,YAFf;EAAM","names":["ValidacaoService","constructor","apenasNumeros","event","pattern","inputChar","String","fromCharCode","charCode","test","apenasNumerosPositivos","factory","providedIn"],"sourceRoot":"","sources":["D:\\GIT\\HomeTools\\003-Frontend\\HomeTools.Front\\src\\app\\services\\validacao.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidacaoService {\n\n  constructor() { }\n\n  apenasNumeros(event: any): boolean {\n    const pattern = /[0-9]/;\n    let inputChar = String.fromCharCode(event.charCode);\n    if (!pattern.test(inputChar))\n      return false;\n    else\n      return true;\n  }\n\n  apenasNumerosPositivos(event: any): boolean {\n    const pattern = /[1-9]/;\n    let inputChar = String.fromCharCode(event.charCode);\n    if (!pattern.test(inputChar))\n      return false;\n    else\n      return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}