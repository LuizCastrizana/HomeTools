{"ast":null,"code":"import { StatusContaEnum } from 'src/app/enums/statusContaEnum';\nimport * as i0 from \"@angular/core\";\nexport class ContaMapper {\n  constructor() {}\n  static ContaDtoToConta(ReadContaDto) {\n    let conta = {\n      Id: ReadContaDto.Id,\n      Descricao: ReadContaDto.Descricao,\n      ValorInteiro: ReadContaDto.ValorInteiro,\n      ValorCentavos: ReadContaDto.ValorCentavos,\n      DiaVencimento: ReadContaDto.DiaVencimento,\n      Categoria: ReadContaDto.Categoria,\n      Pagamentos: [],\n      UltimoPagamento: undefined,\n      Variavel: false,\n      StatusId: StatusContaEnum.Pendente\n    };\n    ReadContaDto.Pagamentos.forEach(pagamentoDto => {\n      let pagamento = {\n        Id: pagamentoDto.Id,\n        ValorInteiro: 0,\n        ValorCentavos: 0,\n        DataPagamento: pagamentoDto.DataPagamento,\n        MesReferencia: pagamentoDto.MesReferencia,\n        AnoReferencia: pagamentoDto.AnoReferencia,\n        ContaId: pagamentoDto.ContaId\n      };\n      conta.Pagamentos.push(pagamento);\n    });\n    this.PreecherStatusConta(conta);\n    return conta;\n  }\n  static ContaVariavelDtoToConta(ReadContaDto) {\n    let conta = {\n      Id: ReadContaDto.Id,\n      Descricao: ReadContaDto.Descricao,\n      ValorInteiro: 0,\n      ValorCentavos: 0,\n      DiaVencimento: ReadContaDto.DiaVencimento,\n      Categoria: ReadContaDto.Categoria,\n      Pagamentos: [],\n      UltimoPagamento: undefined,\n      Variavel: true,\n      StatusId: StatusContaEnum.Pendente\n    };\n    ReadContaDto.Pagamentos.forEach(pagamentoDto => {\n      let pagamento = {\n        Id: pagamentoDto.Id,\n        ValorInteiro: pagamentoDto.ValorInteiro,\n        ValorCentavos: pagamentoDto.ValorCentavos,\n        DataPagamento: pagamentoDto.DataPagamento,\n        MesReferencia: pagamentoDto.MesReferencia,\n        AnoReferencia: pagamentoDto.AnoReferencia,\n        ContaId: pagamentoDto.ContaId\n      };\n      conta.Pagamentos.push(pagamento);\n    });\n    this.CalcularValorMedio(conta);\n    this.PreecherStatusConta(conta);\n    return conta;\n  }\n  static ContaToUpdateContaDto(Conta) {\n    let conta = {\n      Descricao: Conta.Descricao,\n      ValorInteiro: Conta.ValorInteiro,\n      ValorCentavos: Conta.ValorCentavos,\n      DiaVencimento: Conta.DiaVencimento,\n      CategoriaId: Conta.Categoria.Id\n    };\n    return conta;\n  }\n  static ContaToUpdateContaVariavelDto(Conta) {\n    let conta = {\n      Descricao: Conta.Descricao,\n      DiaVencimento: Conta.DiaVencimento,\n      CategoriaId: Conta.Categoria.Id\n    };\n    return conta;\n  }\n  static ContaToCreateContaDto(Conta) {\n    let conta = {\n      Descricao: Conta.Descricao,\n      ValorInteiro: Conta.ValorInteiro,\n      ValorCentavos: Conta.ValorCentavos,\n      DiaVencimento: Conta.DiaVencimento,\n      CategoriaId: Conta.Categoria.Id\n    };\n    return conta;\n  }\n  static ContaToCreateContaVariavelDto(Conta) {\n    let conta = {\n      Descricao: Conta.Descricao,\n      DiaVencimento: Conta.DiaVencimento,\n      CategoriaId: Conta.Categoria.Id\n    };\n    return conta;\n  }\n  static CalcularValorMedio(Conta) {\n    let totalPagamentos = Conta.Pagamentos.reduce((acc, cur) => acc + cur.ValorInteiro, 0) + Conta.Pagamentos.reduce((acc, cur) => acc + cur.ValorCentavos, 0) / 100;\n    let mediaPagamentos = totalPagamentos / Conta.Pagamentos.length;\n    Conta.ValorInteiro = Math.trunc(mediaPagamentos);\n    Conta.ValorCentavos = Math.round((mediaPagamentos - Conta.ValorInteiro) * 100);\n    if (Number.isNaN(Conta.ValorInteiro)) Conta.ValorInteiro = 0;\n    if (Number.isNaN(Conta.ValorCentavos)) Conta.ValorCentavos = 0;\n  }\n  static PreecherStatusConta(Conta) {\n    if (Conta.Pagamentos.length > 0) {\n      Conta.UltimoPagamento = Conta.Pagamentos.sort((a, b) => new Date(b.DataPagamento != undefined ? b.DataPagamento : 0).getTime() - new Date(a.DataPagamento != undefined ? a.DataPagamento : 0).getTime())[0].DataPagamento;\n      let UltimoPagamento = new Date(Conta.UltimoPagamento != undefined ? Conta.UltimoPagamento : 0);\n      let mesReferencia = UltimoPagamento.getMonth() + 1;\n      let anoReferencia = UltimoPagamento.getFullYear();\n      let mesAtual = new Date(Date.now()).getMonth() + 1;\n      let anoAtual = new Date(Date.now()).getFullYear();\n      let diaAtual = new Date(Date.now()).getDate();\n      if (mesReferencia == mesAtual && anoReferencia == anoAtual) {\n        Conta.StatusId = StatusContaEnum.Paga;\n      } else {\n        if (mesReferencia == mesAtual - 1 && anoReferencia == anoAtual && diaAtual < Conta.DiaVencimento || anoReferencia == anoAtual - 1 && mesReferencia == 12 && mesAtual == 1 && diaAtual < Conta.DiaVencimento) {\n          Conta.StatusId = StatusContaEnum.Pendente;\n        } else {\n          Conta.StatusId = StatusContaEnum.Atrasada;\n        }\n      }\n    }\n  }\n  static #_ = this.ɵfac = function ContaMapper_Factory(t) {\n    return new (t || ContaMapper)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ContaMapper,\n    factory: ContaMapper.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["StatusContaEnum","ContaMapper","constructor","ContaDtoToConta","ReadContaDto","conta","Id","Descricao","ValorInteiro","ValorCentavos","DiaVencimento","Categoria","Pagamentos","UltimoPagamento","undefined","Variavel","StatusId","Pendente","forEach","pagamentoDto","pagamento","DataPagamento","MesReferencia","AnoReferencia","ContaId","push","PreecherStatusConta","ContaVariavelDtoToConta","CalcularValorMedio","ContaToUpdateContaDto","Conta","CategoriaId","ContaToUpdateContaVariavelDto","ContaToCreateContaDto","ContaToCreateContaVariavelDto","totalPagamentos","reduce","acc","cur","mediaPagamentos","length","Math","trunc","round","Number","isNaN","sort","a","b","Date","getTime","mesReferencia","getMonth","anoReferencia","getFullYear","mesAtual","now","anoAtual","diaAtual","getDate","Paga","Atrasada","factory","providedIn"],"sourceRoot":"","sources":["D:\\GIT\\HomeTools\\003-Frontend\\HomeTools.Front\\src\\app\\mappers\\financas\\ContaMapper.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { StatusContaEnum } from 'src/app/enums/statusContaEnum';\r\nimport { CreateContaDto } from 'src/app/dto/financas/contas/createContaDto';\r\nimport { CreateContaVariavelDto } from 'src/app/dto/financas/contas/createContaVariavelDto';\r\nimport { ReadContaDto } from 'src/app/dto/financas/contas/readContaDto';\r\nimport { ReadContaVariavelDto } from 'src/app/dto/financas/contas/readContaVariavelDto';\r\nimport { UpdateContaDto } from 'src/app/dto/financas/contas/updateContaDto';\r\nimport { UpdateContaVariavelDto } from 'src/app/dto/financas/contas/updateContaVariavelDto';\r\nimport { Conta } from 'src/app/interfaces/financas/Conta';\r\nimport { PagamentoConta } from 'src/app/interfaces/financas/PagamentoConta';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ContaMapper {\r\n\r\n  constructor() { }\r\n\r\n  public static ContaDtoToConta(ReadContaDto: ReadContaDto): Conta {\r\n    let conta: Conta = {\r\n      Id: ReadContaDto.Id,\r\n      Descricao: ReadContaDto.Descricao,\r\n      ValorInteiro: ReadContaDto.ValorInteiro,\r\n      ValorCentavos: ReadContaDto.ValorCentavos,\r\n      DiaVencimento: ReadContaDto.DiaVencimento,\r\n      Categoria: ReadContaDto.Categoria,\r\n      Pagamentos: [],\r\n      UltimoPagamento: undefined,\r\n      Variavel: false,\r\n      StatusId: StatusContaEnum.Pendente,\r\n    }\r\n    ReadContaDto.Pagamentos.forEach(pagamentoDto => {\r\n      let pagamento: PagamentoConta = {\r\n        Id: pagamentoDto.Id,\r\n        ValorInteiro: 0,\r\n        ValorCentavos: 0,\r\n        DataPagamento: pagamentoDto.DataPagamento,\r\n        MesReferencia: pagamentoDto.MesReferencia,\r\n        AnoReferencia: pagamentoDto.AnoReferencia,\r\n        ContaId: pagamentoDto.ContaId\r\n      }\r\n      conta.Pagamentos.push(pagamento);\r\n    });\r\n    this.PreecherStatusConta(conta);\r\n    return conta;\r\n  }\r\n\r\n  public static ContaVariavelDtoToConta(ReadContaDto: ReadContaVariavelDto): Conta {\r\n    let conta: Conta = {\r\n      Id: ReadContaDto.Id,\r\n      Descricao: ReadContaDto.Descricao,\r\n      ValorInteiro: 0,\r\n      ValorCentavos: 0,\r\n      DiaVencimento: ReadContaDto.DiaVencimento,\r\n      Categoria: ReadContaDto.Categoria,\r\n      Pagamentos: [],\r\n      UltimoPagamento: undefined,\r\n      Variavel: true,\r\n      StatusId: StatusContaEnum.Pendente,\r\n    }\r\n    ReadContaDto.Pagamentos.forEach(pagamentoDto => {\r\n      let pagamento: PagamentoConta = {\r\n        Id: pagamentoDto.Id,\r\n        ValorInteiro: pagamentoDto.ValorInteiro,\r\n        ValorCentavos: pagamentoDto.ValorCentavos,\r\n        DataPagamento: pagamentoDto.DataPagamento,\r\n        MesReferencia: pagamentoDto.MesReferencia,\r\n        AnoReferencia: pagamentoDto.AnoReferencia,\r\n        ContaId: pagamentoDto.ContaId\r\n      }\r\n      conta.Pagamentos.push(pagamento);\r\n    });\r\n    this.CalcularValorMedio(conta);\r\n    this.PreecherStatusConta(conta);\r\n    return conta;\r\n  }\r\n\r\n  public static ContaToUpdateContaDto(Conta: Conta): UpdateContaDto {\r\n    let conta: UpdateContaDto = {\r\n      Descricao: Conta.Descricao,\r\n      ValorInteiro: Conta.ValorInteiro,\r\n      ValorCentavos: Conta.ValorCentavos,\r\n      DiaVencimento: Conta.DiaVencimento,\r\n      CategoriaId: Conta.Categoria.Id\r\n    };\r\n    return conta;\r\n  }\r\n\r\n  public static ContaToUpdateContaVariavelDto(Conta: Conta): UpdateContaVariavelDto {\r\n    let conta: UpdateContaVariavelDto = {\r\n      Descricao: Conta.Descricao,\r\n      DiaVencimento: Conta.DiaVencimento,\r\n      CategoriaId: Conta.Categoria.Id\r\n    };\r\n    return conta;\r\n  }\r\n\r\n  public static ContaToCreateContaDto(Conta: Conta): CreateContaDto {\r\n    let conta: CreateContaDto = {\r\n      Descricao: Conta.Descricao,\r\n      ValorInteiro: Conta.ValorInteiro,\r\n      ValorCentavos: Conta.ValorCentavos,\r\n      DiaVencimento: Conta.DiaVencimento,\r\n      CategoriaId: Conta.Categoria.Id\r\n    };\r\n    return conta;\r\n  }\r\n\r\n  public static ContaToCreateContaVariavelDto(Conta: Conta): CreateContaVariavelDto {\r\n    let conta: CreateContaVariavelDto = {\r\n      Descricao: Conta.Descricao,\r\n      DiaVencimento: Conta.DiaVencimento,\r\n      CategoriaId: Conta.Categoria.Id\r\n    };\r\n    return conta;\r\n  }\r\n\r\n  private static CalcularValorMedio(Conta: Conta) {\r\n    let totalPagamentos = Conta.Pagamentos.reduce((acc, cur) => acc + cur.ValorInteiro, 0) + Conta.Pagamentos.reduce((acc, cur) => acc + cur.ValorCentavos, 0) / 100;\r\n    let mediaPagamentos = totalPagamentos / Conta.Pagamentos.length;\r\n    Conta.ValorInteiro = Math.trunc(mediaPagamentos);\r\n    Conta.ValorCentavos = Math.round((mediaPagamentos - Conta.ValorInteiro) * 100);\r\n    if (Number.isNaN(Conta.ValorInteiro)) Conta.ValorInteiro = 0;\r\n    if (Number.isNaN(Conta.ValorCentavos)) Conta.ValorCentavos = 0;\r\n  }\r\n\r\n  private static PreecherStatusConta(Conta: Conta) {\r\n    if (Conta.Pagamentos.length > 0) {\r\n      Conta.UltimoPagamento = Conta.Pagamentos\r\n      .sort((a, b) => new Date(b.DataPagamento != undefined ? b.DataPagamento : 0).getTime() - new Date(a.DataPagamento != undefined ? a.DataPagamento : 0).getTime())[0].DataPagamento;\r\n      let UltimoPagamento = new Date(Conta.UltimoPagamento != undefined ? Conta.UltimoPagamento : 0)\r\n      let mesReferencia = UltimoPagamento.getMonth() + 1;\r\n      let anoReferencia = UltimoPagamento.getFullYear();\r\n      let mesAtual = new Date(Date.now()).getMonth() + 1;\r\n      let anoAtual = new Date(Date.now()).getFullYear();\r\n      let diaAtual = new Date(Date.now()).getDate();\r\n      if (mesReferencia == mesAtual && anoReferencia == anoAtual) {\r\n        Conta.StatusId = StatusContaEnum.Paga;\r\n      }\r\n      else {\r\n        if ((mesReferencia == mesAtual -1 && anoReferencia == anoAtual && diaAtual < Conta.DiaVencimento)\r\n              ||\r\n            (anoReferencia == anoAtual -1 && mesReferencia == 12 && mesAtual == 1 && diaAtual < Conta.DiaVencimento)) {\r\n          Conta.StatusId = StatusContaEnum.Pendente;\r\n        }\r\n        else {\r\n          Conta.StatusId = StatusContaEnum.Atrasada\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}